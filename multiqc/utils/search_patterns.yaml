# KIR module search patterns
microarray:
    probemap:
        fn: 'probe2gene.map'
    metadata:
        fn: 'metadata.yml'
    diff_exp:
        glob: 'differential_expression.dir/*.result'
    norm_exp:
        glob: 'sample_probe_profile.matrix'
    pca:
        points:
            glob: 'cluster.dir/*.pca.tsv'               
        variance:
            glob: 'cluster.dir/*.pca.ve.tsv'



metagenomics:
    metadata:
        fn: 'metadata.yml'
    taxa_tree:
        glob: 'taxa_map.dir/aggregated_taxa.map.gz'
    diff_count:
        all:
            glob: 'diff.dir/[a-z]*.*.counts.diff.[t,c]sv' # hacky way of avoiding kingdom specific files which begin with capital letters
        bacteria:
            glob: 'diff.dir/Bacteria.*.*.counts.diff.[t,c]sv'
        archaea:
            glob: 'diff.dir/Archaea.*.*.counts.diff.[t,c]sv'
        fungi:
            glob: 'diff.dir/Fungi.*.*.counts.diff.[t,c]sv'
    norm_count:
        taxa:
            glob: 'counts.dir/*.diamond.*.counts.norm.matrix'
        gene:
            glob: 'foo.bar'
    raw_count:
        taxa:
            glob: 'counts.dir/*.*.diamond.counts.tsv.gz'
        gene:
            glob: '*gene.*.counts.norm.[[t,c]sv,matrix]'
    align_stats:
        taxa:
            glob: 'alignment_stats.dir/*[phylum,class,order,family,genus,species].*.stats'
        gene:
            glob: 'alignment_stats/*genes.stats'
    alpha_diversity:
        taxa:
            glob: 'diversity.dir/*[phylum,class,order,family,genus,species].*.diversity.tsv'
        gene:
            glob: 'alpha_diversity/*gene.*.diversity.tsv' 
    pca:
        bacteria:
            points:
                glob: 'counts.dir/Bacteria.*.pca.tsv'               
            variance:
                glob: 'counts.dir/Bacteria.*.pca.ve.tsv'
        archaea:
            points:
                glob: 'counts.dir/Archaea.*.pca.tsv'               
            variance:
                glob: 'counts.dir/Archaea.*.pca.ve.tsv'
        fungi:
            points:
                glob: 'counts.dir/Fungi.*.pca.tsv'               
            variance:
                glob: 'counts.dir/Fungi.*.pca.ve.tsv'

# metagenomics:
#     taxa_tree:
#         fn: 'foo.bar'
#     diff_count:
#         taxa:
#             dir: 'differential_counts'
#             fn: '*[phylum,class,order,family,genus,species].*.counts.diff.[t,c]sv'
#         gene:
#             fn: 'differential_counts/*gene.*.counts.diff.[t,c]sv'
#     norm_count:
#         taxa:
#             fn: '*[phylum,class,order,family,genus,species].*.counts.norm.[[t,c]sv,matrix]'
#         gene:
#             fn: '*gene.*.counts.norm.[[t,c]sv,matrix]'
#     align_stats:
#         taxa:
#             dir: 'alignment_stats'
#             fn: '*phylum.*.stats'
#             #'alignment_stats/*[phylum,class,order,family,genus,species].*.alignment.stats'
#         gene:
#             dir: 'alignment_stats'
#             fn: '*gene.*.stats'
#     alpha_diversity:
#         taxa:
#             dir: 'alpha_diversity'
#             fn: '*[phylum,class,order,family,genus,species].*.diversity.tsv'
#         gene:
#             dir: 'alpha_diversity'
#             fn: '*gene.*.diversity.tsv'   


# MultiQC search patterns.
# Default configurations for how modules can find their log files.
# Loaded by the config module so that these patterns can be overwritten in user config files.

bismark:
    align:
        fn: '*_[SP]E_report.txt'
        # contents: Writing a C -> T converted version of the input file
    dedup:
        fn: '*.deduplication_report.txt'
    meth_extract:
        fn: '*_splitting_report.txt'
        # contents: Bismark Extractor Version
    m_bias:
        fn: '*M-bias.txt'
bowtie:
    contents: '# reads processed:'
bowtie2:
    contents: 'reads; of these:'
cutadapt:
    contents: This is cutadapt
fastq_screen:
    fn: '*_screen.txt'
fastqc:
    data:
        fn: 'fastqc_data.txt'
    zip:
        fn: '*_fastqc.zip'
featurecounts:
    fn: '*.summary'
hicup:
    fn: 'HiCUP_summary_report*'
methylQA:
    fn: '*.report'
picard:
    markdups:
        contents: picard.sam.MarkDuplicates
    insertsize:
        contents: picard.analysis.CollectInsertSizeMetrics
    gcbias:
        contents: picard.analysis.CollectGcBiasMetrics
    hsmetrics:
        contents: picard.analysis.directed.HsMetrics
    oxogmetrics:
        contents: picard.analysis.CollectOxoGMetrics
preseq:
    contents: 'TOTAL_READS	EXPECTED_DISTINCT'
qualimap:
    bamqc:
        raw_data: raw_data
        genome_results: genome_results.txt
        coverage: coverage_histogram.txt
        insert_size: insert_size_histogram.txt
        genome_fraction: genome_fraction_coverage.txt
        gc_dist: mapped_reads_gc-content_distribution.txt
    rnaseq:
        raw_data: raw_data
        rnaseq_results: rnaseq_qc_results.txt
        coverage: coverage_profile_along_genes_(total).txt
rseqc:
    bam_stat:
        contents: 'Proper-paired reads map to different chrom:'
    gene_body_coverage:
        fn: '*.geneBodyCoverage.txt'
    inner_distance:
        fn: '*.inner_distance_freq.txt'
    junction_annotation:
        contents: 'Partial Novel Splicing Junctions:'
    junction_saturation:
        fn: '*.junctionSaturation_plot.r'
    read_gc:
        fn: '*.GC.xls'
    read_distribution:
        contents: 'Group               Total_bases         Tag_count           Tags/Kb'
    read_duplication_pos:
        fn: '*.pos.DupRate.xls'
snpeff:
    fn: '*snpEff.summary.csv'
star:
    fn: '*Log.final.out'
tophat:
    fn: '*align_summary.txt'
skewer:
    contents: 'COMMAND LINE:	skewer'
samblaster:
    contents: 'samblaster: Version'
samtools:
    contents: 'This file was produced by samtools stats'
csv_table:
    fn: '*.[t,c]sv'
