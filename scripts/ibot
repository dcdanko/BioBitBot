#!/usr/bin/env python

""" MultiQC: A modular tool to aggregate results from bioinformatics analyses across many samples into a single report
"""

from __future__ import print_function

import base64
import click
from collections import defaultdict
from distutils import version
from distutils.dir_util import copy_tree
import importlib
import io
import jinja2
import logging
import os
import pkg_resources
import re
import shutil
import sys
import tempfile
import traceback

try:
    from urllib.request import urlopen #py3
except ImportError:
    from urllib import urlopen #py2
    # Use UTF-8 encoding by default
    reload(sys)
    sys.setdefaultencoding('utf8')

from ibot import logger, __version__
from ibot.utils import report, plugin_hooks, config, log

plugin_hooks.mqc_trigger('config_loaded') 

@click.command(
    context_settings = dict( help_option_names = ['-h', '--help'] )
)
@click.argument('pipeline_dir',
                    type = click.Path(exists=True),
                    nargs = -1,
                    required = True,
                    metavar = "<pipeline output directory>"
)
@click.option('-f', '--force',
                    is_flag = True,
                    help = "Overwrite any existing reports"
)
@click.option('-d', '--dirs',
                    is_flag = True,
                    help = "Prepend directory to sample names"
)
@click.option('-s', '--fullnames', 'no_clean_sname',
                    is_flag = True,
                    help = "Do not clean the sample names (leave as full file name)"
)
@click.option('-i', '--title',
                    type = str,
                    help = "Report title. Printed as page header, used for filename if not otherwise specified."
)
@click.option('-n', '--filename',
                    type = str,
                    help = "Report filename. Use 'stdout' to print to standard out."
)
@click.option('-o', '--outdir',
                    type = str,
                    default = config.output_dir,
                    help = "Create report in the specified output directory."
)
@click.option('-t', '--template',
                    default = config.template,
                    type = click.Choice(config.avail_templates),
                    help = "Report template to use."
)
@click.option('-x', '--ignore',
                    type = str,
                    multiple = True,
                    help = "Ignore analysis files (glob expression)"
)
@click.option('-a', '--analysis', metavar='[analysis type]',
                    type = click.Choice(config.all_avail_analysis_types),
                    multiple = False,
                    help = "Type of analysis to run"
)
@click.option('--data-dir/--no-data-dir', 'make_data_dir',
                    default=config.make_data_dir,
                    help = "Specify whether the parsed data directory should be created."
)
@click.option('-k', '--data-format', 'data_format',
                    default = config.data_format,
                    type = click.Choice(config.data_format_extensions.keys()),
                    help = "Output parsed data in a different format"
)
@click.option('-z', '--zip-data-dir', 'zip_data_dir',
                    is_flag = True,
                    help = "Compress the data directory."
)
@click.option('--flat', 'plots_flat',
                    is_flag = True,
                    help = "Use only flat plots (static images)"
)
@click.option('--interactive', 'plots_interactive',
                    is_flag = True,
                    help = "Use only interactive plots (HighCharts Javascript)"
)
@click.option('-v', '--verbose', 
                    count = True,
                    default = 0,
                    help = "Increase output verbosity."
)
@click.option('-q', '--quiet', 
                    is_flag = True,
                    help = "Only show log warnings"
)
@click.version_option(__version__)

def ibot(pipeline_dir, dirs, no_clean_sname, title, template, analysis, outdir, ignore, filename, 
make_data_dir, data_format, zip_data_dir, force, plots_flat, plots_interactive, verbose, quiet, **kwargs):
    """
    iBot is a tool to create easily understood reports from the output
    of data analysis pipelines.
    """
    
    # Set up logging level
    loglevel = log.LEVELS.get(min(verbose,1), "INFO")
    if quiet:
        loglevel = 'WARNING'
    log.init_log(logger, loglevel=loglevel)
    
    plugin_hooks.mqc_trigger('execution_start')
    
    logger.info("This is iBot v{}".format(__version__))
    logger.debug("Command     : {}".format(' '.join(sys.argv)))
    logger.debug("Working dir : {}".format(os.getcwd()))
    logger.debug("Template    : {}".format(template))
    
    # Overwrite config defaults with user yaml files
    # config.mqc_load_userconfig()
    
    # # Check that we're running the latest version of MultiQC
    # if config.no_version_check is not True:
    #     try:
    #         response = urlopen('http://multiqc.info/version.php?v={}'.format(__version__))
    #         remote_version = response.read().decode('utf-8')
    #         if version.StrictVersion(re.sub('[^0-9\.]','', remote_version)) > version.StrictVersion(re.sub('[^0-9\.]','', __version__)):
    #             logger.warn('MultiQC Version {} now available!'.format(remote_version))
    #     except:
    #         logger.debug('Could not connect to multiqc.info for version check')
    
    # Set up key variables (overwrite config vars from command line)
    config.template = template
    config.title = title
    config.prepend_dirs = dirs
    config.pipeline_dir = pipeline_dir
    config.output_dir = outdir
    config.make_data_dir = make_data_dir
    config.force = force
    config.zip_data_dir = zip_data_dir
    config.data_format = data_format
    config.plots_force_flat = plots_flat
    config.plots_force_interactive = plots_interactive
    config.kwargs = kwargs # Plugin command line options
    # if no_clean_sname:
    #     config.fn_clean_exts = []
    #     logger.info("Not cleaning sample names")
    if len(ignore) > 0:
        logger.warn("Ignoring files that match: {}".format(", ".join(ignore)))
        config.fn_ignore_files.extend(ignore)

    # Set output filename
    if filename == 'stdout':
        config.output_fn = sys.stdout
        logger.info("Printing report to stdout")
    else:
        if title is not None and filename == config.output_fn_name:
            filename = re.sub('[^\w\.-]', '', re.sub('[-\s]+', '-', title) ).strip()
            filename += '_ibot_report'
        if filename is not None:
            if filename.endswith('.html'):
                filename = filename[:-5]
            config.output_fn_name = filename
            config.data_dir_name = '{}_data'.format(filename)
        if not config.output_fn_name.endswith('.html'):
            config.output_fn_name = '{}.html'.format(config.output_fn_name)
        
        # Check that we're not going to overwrite anything before we run
        config.output_fn = os.path.join(config.output_dir, config.output_fn_name)
        config.data_dir = os.path.join(config.output_dir, config.data_dir_name)
        if not config.force:
            if os.path.exists(config.output_fn):
                logger.error("iBot Report '{}' already exists.".format(os.path.relpath(config.output_fn)))
                logger.info("Use -f or --force to overwrite existing reports")
                sys.exit(1)
            if config.make_data_dir == True and os.path.exists(config.data_dir):
                logger.error("Output directory '{}' already exists.".format(os.path.relpath(config.data_dir)))
                logger.info("Use -f or --force to overwrite existing reports")
                sys.exit(1)
        else:
            logger.debug('Running in --force mode, will overwrite any existing reports.')
            
    
    # Print some status updates
    if config.title is not None:
        logger.info("Report title: {}".format(config.title))
    if dirs:
        logger.info("Prepending directory to sample names")
    for d in config.pipeline_dir:
        logger.info("Searching '{}'".format(d))
    
    # Check that the given analysis exists
    if not analysis in config.all_avail_analysis_types.keys():
        logger.error('Analysis type {} not found. Has it been declared as an entry point in setup.py?'.format(analysis))
        sys.exit(1)
    logger.debug("Analysis type: {}".format(analysis))
    
    # Create the temporary working directories
    tmp_dir = tempfile.mkdtemp()
    logger.debug('Using temporary directory for creating report: {}'.format(tmp_dir))
    config.data_tmp_dir = os.path.join(tmp_dir, 'multiqc_data')
    if filename != 'stdout' and config.make_data_dir == True:
        config.data_dir = config.data_tmp_dir
        os.makedirs(config.data_dir)
    else:
        config.data_dir = None
    
    # Load the template
    template_mod = config.avail_templates[template].load()
    
    # Add an output subdirectory if specified by template
    try:
        config.output_dir = os.path.join(config.output_dir, template_mod.output_subdir)
    except AttributeError:
        pass # No subdirectory variable given
    
    
    # Get the list of files to search
    report.get_filelist()
    
    # Run the modules!
    plugin_hooks.mqc_trigger('before_modules')
    report.modules_output = list()
    sys_exit_code = 0
    try:
        logger.info("{} analysis".format(analysis))
        analysis = config.all_avail_analysis_types[analysis].load()
        logger.info("Loaded {} analysis".format(analysis))
        modules  = analysis().modules

        for module in modules:
            report.modules_output.append(module)

            # Copy over css & js files if requested by the theme
            try:
                for to, path in report.modules_output[-1].css.items():
                    copy_to = os.path.join(tmp_dir, to)
                    os.makedirs(os.path.dirname(copy_to))
                    shutil.copyfile(path, copy_to)
            except AttributeError:
                pass
            try:
                for to, path in report.modules_output[-1].js.items():
                    copy_to = os.path.join(tmp_dir, to)
                    os.makedirs(os.path.dirname(copy_to))
                    shutil.copyfile(path, copy_to)
            except AttributeError:
                pass

    except UserWarning:
        pass # No samples found
    except Exception as e:
        # Flag the error, but carry on
        logger.error("Oops! The '{}' iBot analysis broke... ".format(analysis))
        logger.error(traceback.format_exc(e))
        sys.exit(1)
    
    plugin_hooks.mqc_trigger('after_modules')
    
    
    # Make the final report path & data directories
    if filename != 'stdout':
        # Check for existing reports and remove if -f was specified
        # We repeat this check in case the output name has been altered since launch
        config.output_fn = os.path.join(config.output_dir, config.output_fn_name)
        if os.path.exists(config.output_fn):
            if config.force:
                logger.warning("Deleting    : {}   (-f was specified)".format(os.path.relpath(config.output_fn)))
                os.remove(config.output_fn)
            else:
                logger.error("iBot Report {} already exists.".format(config.output_fn))
                logger.info("Use -f or --force to overwrite existing reports")
                shutil.rmtree(tmp_dir)
                sys.exit(1)
        # Make directories for report if not already existing
        if not os.path.exists(os.path.dirname(config.output_fn)):
            os.makedirs(os.path.dirname(config.output_fn))
        logger.info("Report      : {}".format(os.path.relpath(config.output_fn)))
        
        # Now do the same for the data directory
        if config.make_data_dir == False:
            logger.info("Data        : None")
        else:
            config.data_dir = os.path.join(config.output_dir, config.data_dir_name)
            if os.path.exists(config.data_dir):
                if config.force:
                    logger.warning("Deleting    : {}   (-f was specified)".format(os.path.relpath(config.data_dir)))
                    shutil.rmtree(config.data_dir)
                else:
                    logger.error("Output directory {} already exists.".format(config.data_dir))
                    logger.info("Use -f or --force to overwrite existing reports")
                    shutil.rmtree(tmp_dir)
                    sys.exit(1)
            os.makedirs(config.data_dir)
            logger.info("Data        : {}".format(os.path.relpath(config.data_dir)))
            
            # Modules have run, so data directory should be complete by now. Move its contents.
            for f in os.listdir(config.data_tmp_dir):
                fn = os.path.join(config.data_tmp_dir, f)
                logger.debug("Moving data file from '{}' to '{}'".format(fn, config.data_dir))
                shutil.move(fn, config.data_dir)
    
    plugin_hooks.mqc_trigger('before_template')
    
    # Load in parent template files first if a child theme
    try:
        parent_template = config.avail_templates[template_mod.template_parent].load()
        copy_tree(parent_template.template_dir, tmp_dir)
    except AttributeError:
        pass # Not a child theme
    
    # Copy the template files to the tmp directory (distutils overwrites parent theme files)
    copy_tree(template_mod.template_dir, tmp_dir)
    
    # Function to include file contents in Jinja template
    def include_file(name, fdir=tmp_dir, b64=False):
        if b64:
            with io.open (os.path.join(fdir, name), "rb") as f:
                return base64.b64encode(f.read()).decode('utf-8')
        else:
            with io.open (os.path.join(fdir, name), "r", encoding='utf-8') as f:
                return f.read()
    
    # Load the report template
    try:
        env = jinja2.Environment(loader=jinja2.FileSystemLoader(tmp_dir))
        env.globals['include_file'] = include_file
        j_template = env.get_template(template_mod.base_fn)
    except:
        raise IOError ("Could not load {} template file '{}'".format(template, template_mod.base_fn))

    # Use jinja2 to render the template and overwrite
    config.pipeline_dir = [os.path.realpath(d) for d in config.pipeline_dir]
    report_output = j_template.render(report=report, config=config)
    if filename == 'stdout':
        print(report_output.encode('utf-8'), file = sys.stdout)
    else:
        try:
            with io.open (config.output_fn, "w", encoding='utf-8') as f:
                print(report_output, file=f)
        except IOError as e:
            raise IOError ("Could not print report to '{}' - {}".format(config.output_fn, IOError(e)))
        
        # Copy over files if requested by the theme
        try:
            for f in template_mod.copy_files:
                fn = os.path.join(tmp_dir, f)
                dest_dir = os.path.join( os.path.dirname(config.output_fn), f)
                copy_tree(fn, dest_dir)
        except AttributeError:
            pass # No files to copy
    
    # Clean up temporary directory
    shutil.rmtree(tmp_dir)
    
    # Zip the data directory if requested
    if config.zip_data_dir and config.data_dir is not None:
        shutil.make_archive(config.data_dir, 'zip', config.data_dir)
        shutil.rmtree(config.data_dir)
    
    plugin_hooks.mqc_trigger('execution_finish')

    logger.info("iBot complete")
    
    # Move the log file into the data directory
    log.copy_tmp_log()
    
    # Exit with an error code if a module broke
    sys.exit(sys_exit_code)
    

if __name__ == "__main__":
    # Add any extra plugin command line options
    for entry_point in pkg_resources.iter_entry_points('ibot.cli_options.v1'):
        opt_func = entry_point.load()
        ibot = opt_func(ibot)
    ibot()
